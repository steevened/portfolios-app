// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?
  username      String?   @unique
  developer     Developer?
  projects      Project[]
  draft         Draft?
}

model Developer {
  id       String          @id @default(cuid())
  bio      String?
  userId   String          @unique
  user     User            @relation(fields: [userId], references: [id])
  occupations DeveloperOccupation[]
  links   DeveloperLinks?
}


model DeveloperOccupation {
  developerId String
  occupationId String
  developer  Developer @relation(fields: [developerId], references: [id])
  occupation   Occupation    @relation(fields: [occupationId], references: [id])

  @@id([developerId, occupationId])
}

model Occupation {
  id    String          @id @default(cuid())
  name  String          @unique
  users DeveloperOccupation[]
}
model DeveloperLinks {
  id String @id @default(cuid())
  developerId String
  developer Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  github   String?
  linkedin String?
  twitter  String?
  website  String?

  @@unique([developerId])
}

model Technology {
  id       String              @id @default(cuid())
  name     String              @unique
  slug     String              @unique
  projects ProjectTechnology[]
}

model Project {
  id           String              @id @default(cuid())
  name         String
  description  String?
  liveUrl      String?
  githubUrl    String?
  technologies ProjectTechnology[]
  published    Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  views        Int                 @default(0)
  authorId     String
  author       User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  gallery      ProjectGallery[]
  isOnDraft    Boolean             @default(true)
  draftId      String?
  draft        Draft?              @relation(fields: [draftId], references: [id])
}

model Draft {
  id       String    @id @default(cuid())
  userId   String?    
  projects Project[]
  user     User?      @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model ProjectTechnology {
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technologyId String
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
}

model ProjectGallery {
  id        String  @id @default(cuid())
  url       String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


