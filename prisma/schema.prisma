generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  username      String?    @unique
  accounts      Account[]
  developer     Developer?
  draft         Draft?
  projects      Project[]
  sessions      Session[]
  bookmarks     Bookmarks?
  likes         Like[]
  comments      Comment[]
}

model Developer {
  id       String          @id @default(cuid())
  bio      String?
  headline String?         @db.VarChar(50)
  userId   String          @unique
  user     User            @relation(fields: [userId], references: [id])
  links    DeveloperLinks?
}

model DeveloperLinks {
  id          String    @id @default(cuid())
  developerId String    @unique
  github      String?
  linkedin    String?
  twitter     String?
  website     String?
  developer   Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
}

model Language {
  id       String            @id @default(cuid())
  name     String            @unique
  slug     String            @unique
  projects ProjectLanguage[]
}

model ProjectLanguage {
  projectId  String
  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, languageId])
}

model Project {
  id          String             @id @default(cuid())
  name        String
  description String?
  liveUrl     String?
  githubUrl   String?
  published   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  views       Int                @default(0)
  authorId    String
  isOnDraft   Boolean            @default(true)
  draftId     String?
  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  draft       Draft?             @relation(fields: [draftId], references: [id])
  gallery     ProjectGallery[]
  languages   ProjectLanguage[]
  bookmarks   Project_bookmark[]
  likes       Like[]
  comments    Comment[]


  @@unique([name, authorId], name: "unique_project_name")
}

model Like {
  userId String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Comment {
  userId String
  projectId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId, createdAt])

  @@unique([userId, projectId, createdAt], name: "unique_comment")


}

model Project_bookmark {
  projectId  String
  bookmarkId String

  bookmark Bookmarks @relation(fields: [bookmarkId], references: [id])
  project  Project   @relation(fields: [projectId], references: [id])

  @@unique([projectId, bookmarkId])
}

model Bookmarks {
  id       String             @id @default(cuid())
  userId   String             @unique
  projects Project_bookmark[]

  user User @relation(fields: [userId], references: [id])
}

model GuestBookmarks {
  id       String    @id @default(cuid())
  // projects Project[]
}

model Draft {
  id       String    @id @default(cuid())
  userId   String?   @unique
  user     User?     @relation(fields: [userId], references: [id])
  projects Project[]
}

model ProjectGallery {
  id        String  @id @default(cuid())
  url       String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
